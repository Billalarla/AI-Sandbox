from django.db import models
from django.contrib.auth.models import User
from django.urls import reverse


class Campaign(models.Model):
    STATUS_CHOICES = [
        ('planning', 'Planning'),
        ('active', 'Active'),
        ('inactive', 'Inactive'),
        ('complete', 'Complete'),
    ]
    
    TYPE_CHOICES = [
        ('conference', 'Conference'),
        ('webinar', 'Webinar'),
        ('trade_show', 'Trade Show'),
        ('public_relations', 'Public Relations'),
        ('partners', 'Partners'),
        ('direct_mail', 'Direct Mail'),
        ('email', 'Email'),
        ('telemarketing', 'Telemarketing'),
        ('others', 'Others'),
    ]
    
    name = models.CharField(max_length=200)
    status = models.CharField(max_length=15, choices=STATUS_CHOICES, default='planning')
    campaign_type = models.CharField(max_length=20, choices=TYPE_CHOICES, blank=True)
    
    start_date = models.DateField()
    end_date = models.DateField()
    
    # Budget and tracking
    budgeted_cost = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)
    actual_cost = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)
    expected_revenue = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)
    expected_response = models.CharField(max_length=10, blank=True, help_text='Expected response rate %')
    
    # Metrics
    num_sent = models.IntegerField(default=0)
    
    description = models.TextField(blank=True)
    objective = models.TextField(blank=True)
    
    # Tracking
    assigned_to = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='created_campaigns')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-start_date']
    
    def __str__(self):
        return self.name
    
    @property
    def roi(self):
        """Return on Investment calculation"""
        if self.actual_cost and self.actual_cost > 0:
            revenue = self.get_actual_revenue()
            if revenue > 0:
                return ((revenue - self.actual_cost) / self.actual_cost) * 100
        return 0
    
    def get_actual_revenue(self):
        """Calculate actual revenue from opportunities generated by this campaign"""
        from opportunities.models import Opportunity
        return sum(
            opp.amount for opp in Opportunity.objects.filter(
                lead_source='campaign',
                sales_stage='closed_won'
                # You might want to add campaign tracking to opportunities
            )
        )
    
    def get_absolute_url(self):
        return reverse('campaigns:detail', kwargs={'pk': self.pk})


class CampaignTarget(models.Model):
    """Track which contacts/leads are targeted by a campaign"""
    TARGET_TYPES = [
        ('contact', 'Contact'),
        ('lead', 'Lead'),
    ]
    
    campaign = models.ForeignKey(Campaign, on_delete=models.CASCADE, related_name='targets')
    target_type = models.CharField(max_length=10, choices=TARGET_TYPES)
    target_id = models.PositiveIntegerField()
    
    # Response tracking
    activity_date = models.DateTimeField(null=True, blank=True)
    response = models.BooleanField(default=False)
    
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = ['campaign', 'target_type', 'target_id']
    
    def __str__(self):
        return f"{self.campaign.name} - {self.target_type} {self.target_id}"
